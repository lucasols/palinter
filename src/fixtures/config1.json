{
  "blocks": {
    "react_file_name": {
      "if_file": { "has_extension": "tsx" },
      "expect": [
        {
          "name_case_is": "PascalCase",
          "name_not_includes_any": ["."],
          "error_msg": "React files name must be PascalCase"
        },
        {
          "content_matches_any": ["regex:export const {{fileName}}:? "]
        }
      ]
    },
    "react_sub_file": {
      "if_file": {
        "has_name": "*:PascalCase.(hooks|utils|style|types).ts"
      },
      "expect": {
        "has_sibling_file": "{{1}}.tsx"
      }
    }
  },
  "global_rules": [
    {
      "if_file": { "has_extension": "svg" },
      "expect": {
        "name_case_is": "kebab-case"
      },
      "error_msg": "Svg files should be named in kebab-case"
    }
  ],
  "//src": {
    "//icons": {
      "rules": [
        {
          "if_file": "any",
          "expect": {
            "extension_is": "svg"
          },
          "error_msg": "Only svg files are allowed in /assets/icons"
        },
        {
          "if_file": {
            "does_not_have_name": "static-*.ts"
          },
          "expect": [
            {
              "content_matches_any": ["currentColor"],
              "error_msg": "Svg should have at least one color set as `currentColor`, if the icon is static and don't have any dynamic color prefix the name with `static-`"
            },
            {
              "content_matches_any": [
                "viewBox=\"0 0 24 24\"",
                "viewBox=\"0 0 48 48\""
              ],
              "error_msg": "Svg should have a viewBox attribute with 24x24 or 48x48, check if you are exporting the correct svg from figma"
            }
          ]
        }
      ]
    },
    "//stores": {
      "has_files": [
        "collectionStore.example.ts",
        "documentStore.example.ts",
        "listQueryStore.example.ts"
      ],
      "rules": [
        {
          "if_file": "any",
          "expect": {
            "name_case_is": "camelCase"
          }
        },
        {
          "if_folder": "any",
          "expect": {
            "name_case_is": "camelCase"
          }
        },
        {
          "if_file": {
            "has_name": "*Store.utils.ts"
          },
          "expect": {
            "has_sibling_file": "$1Store.ts"
          }
        },
        {
          "if_file": {
            "has_name": "*(Doc|List|Query).(utils|actions).ts"
          },
          "expect": {
            "has_sibling_file": "$1$2.ts"
          }
        },
        {
          "if_file": {
            "has_name": "*Doc.ts"
          },
          "expect": {
            "content_matches_any": ["export const $1Doc = createDocumentStore<"]
          }
        },
        {
          "if_file": {
            "has_name": "*List.ts"
          },
          "expect": {
            "content_matches_any": [
              "export const {{1}}List = createListQueryStore<"
            ]
          }
        },
        {
          "if_file": {
            "has_name": "*Doc.ts"
          },
          "expect": {
            "content_matches_any": ["export const $1Doc = createDocumentStore<"]
          }
        },
        {
          "if_folder": {
            "root_files": {
              "does_not_have_duplicate_name": "regex:(?<baseName>.+)(Doc|Store|List).ts"
            }
          },
          "expect": {
            "name_is": "{{baseName}}"
          }
        }
      ]
    },
    "//pages": {
      "//_shell": {
        "has_files": ["Shell.tsx"]
      },
      "rules": [
        {
          "one_of": [
            "react_component",
            {
              "if_file": { "has_extension": "tsx" },
              "expect": [
                {
                  "name_case_is": "kebab-case",
                  "name_not_includes_any": ["."],
                  "error_msg": "React files name must be PascalCase"
                },
                {
                  "content_matches_any": [
                    "line_regex:^export const {{fileName:PascalCase}}Page:? "
                  ]
                }
              ]
            }
          ]
        },
        {
          "if_file": {
            "has_name": "*:kebab-case.(hooks|utils|style|types).ts"
          },
          "expect": {
            "has_sibling_file": "$1.tsx"
          }
        },
        {
          "if_folder": {
            "has_name_case": "PascalCase"
          },
          "expect": {
            "root_files": {
              "has": ["{{parentFolder}}.tsx"]
            }
          }
        },
        {
          "if_folder": {
            "has_name_case": "camelCase"
          },
          "expect": {
            "root_files": {
              "does_not_have": ["{{parentFolder as PascalCase}}.tsx"]
            }
          }
        }
      ]
    }
  }
}
