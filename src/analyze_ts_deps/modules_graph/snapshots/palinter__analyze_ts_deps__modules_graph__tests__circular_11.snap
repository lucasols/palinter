---
source: src/analyze_ts_deps/modules_graph/tests.rs
expression: "get_deps_for_each([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"1\", \"2\", \"3\"].to_vec(),\n    get_node_edges)"
---
{
    "A": DepsResult {
        deps: {
            "A",
            "B",
            "D",
            "F",
            "E",
            "C",
            "1",
            "3",
            "2",
        },
        circular_deps: Some(
            [
                "A > B > |D| > F > |D|",
                "A > E > C > |1| > 3 > |1|",
            ],
        ),
    },
    "B": DepsResult {
        deps: {
            "B",
            "D",
            "F",
            "E",
        },
        circular_deps: Some(
            [
                "B > |D| > F > |D|",
            ],
        ),
    },
    "C": DepsResult {
        deps: {
            "C",
            "1",
            "3",
            "2",
        },
        circular_deps: Some(
            [
                "C > |1| > 3 > |1|",
            ],
        ),
    },
    "D": DepsResult {
        deps: {
            "D",
            "F",
        },
        circular_deps: Some(
            [
                "|D| > F > |D|",
            ],
        ),
    },
    "E": DepsResult {
        deps: {},
        circular_deps: None,
    },
    "F": DepsResult {
        deps: {
            "F",
            "D",
        },
        circular_deps: Some(
            [
                "|F| > D > |F|",
            ],
        ),
    },
    "1": DepsResult {
        deps: {
            "1",
            "3",
        },
        circular_deps: Some(
            [
                "|1| > 3 > |1|",
            ],
        ),
    },
    "2": DepsResult {
        deps: {},
        circular_deps: None,
    },
    "3": DepsResult {
        deps: {
            "3",
            "1",
        },
        circular_deps: Some(
            [
                "|3| > 1 > |3|",
            ],
        ),
    },
}
